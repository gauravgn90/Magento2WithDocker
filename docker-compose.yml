version: '3.7'

services:
  magento:
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.magento
      args:
        - NEW_RELIC_AGENT_VERSION=${NEW_RELIC_AGENT_VERSION}
        - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
        - NEW_RELIC_APPNAME=${NEW_RELIC_APPNAME}
        - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
    volumes:
      - ./magento2:/var/www/html
    container_name: magento_php
    ports:
      - "9000:9000"
    hostname: local.magento2.com
    links:
      - mariadbserver
      - elasticsearch
      - redis
      - rabbitmq
      - mailhog
    networks:
      - magento2-network
    depends_on:
      - mariadbserver
      - elasticsearch
      - redis
      - rabbitmq
      - mailhog

  mariadbserver:
    image: mariadb:10.6
    command: --innodb-use-native-aio=0
    ports:
      - "3307:3306"
    environment:
      MARIADB_USER: admin
      MARIADB_PASSWORD: admin
      MARIADB_DATABASE: magento
      MARIADB_ROOT_PASSWORD: root
    container_name: magento_mariadb
    volumes:
      - mariadbdata:/var/lib/mysql
    networks:
      - magento2-network

  elasticsearch:
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    container_name: magento_elasticsearch
    networks:
      - elastic-net
      - magento2-network
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 4g

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    container_name: magento_redis
    volumes:
      - redisdata:/data
    networks:
      - magento2-network

  mailhog:
    image: mailhog/mailhog
    container_name: magento_mailhog
    ports:
      - "8025:8025"
    networks:
      - magento2-network

  rabbitmq:
    image: rabbitmq:management
    container_name: magento_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - magento2-network

  nginx:
    image: nginx:latest
    container_name: magento_nginx
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./magento2:/var/www/html
    networks:
      - magento2-network
    depends_on:
      - magento

  agent:
    container_name: newrelic-infra
    build:
      context: .
      dockerfile: ./Docker/newrelic-infra.dockerfile
    cap_add:
      - SYS_PTRACE
    pid: host
    privileged: true
    volumes:
      - "newrelicdata:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    networks:
      - magento2-network

  varnish:
    image: varnish:latest
    container_name: magento_varnish
    restart: unless-stopped
    ports:
      - "6081:6081"
      - "6082:6082"
    depends_on:
      - nginx
      - magento
    networks:
      - magento2-network
    volumes:
      - ./Docker/varnish/default.vcl:/etc/varnish/default.vcl
    command: ["varnishd", "-F", "-a", ":6081", "-T", "localhost:6082", "-f", "/etc/varnish/default.vcl", "-s", "malloc,256m"]

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Docker/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - magento2-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - magento2-network

networks:
  elastic-net:
    driver: bridge
  magento2-network:
    driver: bridge

volumes:
  esdata:
    driver: local
  redisdata:
    driver: local
  mariadbdata:
    driver: local
  newrelicdata:
    driver: local